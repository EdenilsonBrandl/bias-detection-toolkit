# Install required packages
!pip install pandas numpy scikit-learn matplotlib seaborn

import pandas as pd
import numpy as np
import random

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# ---------------------------------------
# 1. Synthetic Resume Dataset Simulation
# ---------------------------------------

def simulate_resumes(n_samples=1000, random_seed=42):
    random.seed(random_seed)
    np.random.seed(random_seed)
    
    job_levels = ['Assistant', 'Analyst', 'Coordinator', 'Manager', 'Director']
    education_levels = ['High School', 'Technical', 'Bachelor', 'Postgrad', 'Master', 'Doctorate']
    attitude_questions = ['helps colleagues?', 'blames others?', 'takes responsibility?']
    attitude_responses = ['positive', 'neutral', 'negative']
    
    data = []
    for _ in range(n_samples):
        age = np.random.randint(22, 60)
        years_experience = np.random.randint(0, max(1, age - 18))
        education = random.choice(education_levels)
        prev_job = random.choice(job_levels)
        current_job = random.choice(job_levels)
        
        # Triangulation inconsistency: regression in job levels is suspicious
        inconsistency_flag = int(job_levels.index(prev_job) > job_levels.index(current_job))
        
        # Simulate ethical, intellectual, emotional scores (0 to 1)
        ethics_score = np.clip(np.random.normal(0.7, 0.15), 0, 1)
        intellectual_score = np.clip(np.random.normal(0.7, 0.2), 0, 1)
        emotional_score = np.clip(np.random.normal(0.65, 0.2), 0, 1)
        
        # Monte Carlo simulated attitude question and response
        question = random.choice(attitude_questions)
        response = random.choice(attitude_responses)
        response_score_map = {'positive': 1, 'neutral': 0.5, 'negative': 0}
        attitude_score = response_score_map[response]
        
        # Final composite score weighing different attributes
        final_score = 0.4 * ethics_score + 0.3 * intellectual_score + 0.3 * emotional_score - 0.2 * inconsistency_flag
        
        # Label: 1 = pass, 0 = fail (threshold can be tuned)
        label = int(final_score > 0.65)
        
        data.append([
            age, years_experience,
            education_levels.index(education),
            job_levels.index(prev_job),
            job_levels.index(current_job),
            inconsistency_flag,
            ethics_score,
            intellectual_score,
            emotional_score,
            attitude_score,
            label
        ])
    
    columns = [
        'Age', 'YearsExperience', 'EducationLevel',
        'PreviousJobLevel', 'CurrentJobLevel',
        'InconsistencyFlag',
        'EthicsScore', 'IntellectualScore', 'EmotionalScore',
        'AttitudeScore', 'Approved'
    ]
    
    df = pd.DataFrame(data, columns=columns)
    return df

# Generate the dataset
df_resumes = simulate_resumes(n_samples=1500)

# ---------------------------------------
# 2. Exploratory Data Analysis (EDA)
# ---------------------------------------

def plot_eda(dataframe):
    sns.pairplot(
        dataframe[['EthicsScore', 'IntellectualScore', 'EmotionalScore', 'AttitudeScore', 'Approved']], 
        hue='Approved', diag_kind='kde'
    )
    plt.suptitle("Pairplot of Key Resume Scores Colored by Approval Status", y=1.02)
    plt.show()

plot_eda(df_resumes)

# ---------------------------------------
# 3. Machine Learning Model Training
# ---------------------------------------

# Features and target
X = df_resumes.drop(columns=['Approved'])
y = df_resumes['Approved']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Pipeline with scaling and RandomForest
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler

model_pipeline = make_pipeline(
    StandardScaler(),
    RandomForestClassifier(n_estimators=300, random_state=42, n_jobs=-1)
)

model_pipeline.fit(X_train, y_train)

# Predictions and evaluation
y_pred = model_pipeline.predict(X_test)

print("Model Classification Report:\n")
print(classification_report(y_test, y_pred))

# Optional: Confusion matrix visualization
def plot_confusion(y_true, y_pred):
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Fail','Pass'], yticklabels=['Fail','Pass'])
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.title('Confusion Matrix')
    plt.show()

plot_confusion(y_test, y_pred)

# ---------------------------------------
# 4. Resume Evaluation Function
# ---------------------------------------

def evaluate_resume(
    age: int,
    years_experience: int,
    education_text: str,
    previous_job_text: str,
    current_job_text: str,
    ethics_score: float,
    intellectual_score: float,
    emotional_score: float,
    attitude_response: str
):
    education_levels = ['High School', 'Technical', 'Bachelor', 'Postgrad', 'Master', 'Doctorate']
    job_levels = ['Assistant', 'Analyst', 'Coordinator', 'Manager', 'Director']
    attitude_score_map = {'positive': 1, 'neutral': 0.5, 'negative': 0}
    
    # Validate inputs and map
    try:
        education_idx = education_levels.index(education_text)
        prev_job_idx = job_levels.index(previous_job_text)
        current_job_idx = job_levels.index(current_job_text)
        attitude_score = attitude_score_map.get(attitude_response.lower(), 0.5)
    except ValueError as e:
        raise ValueError(f"Invalid categorical input: {e}")
    
    inconsistency_flag = int(prev_job_idx > current_job_idx)
    
    input_features = np.array([[
        age,
        years_experience,
        education_idx,
        prev_job_idx,
        current_job_idx,
        inconsistency_flag,
        ethics_score,
        intellectual_score,
        emotional_score,
        attitude_score
    ]])
    
    # Prediction & Probability
    pred_label = model_pipeline.predict(input_features)[0]
    pred_prob = model_pipeline.predict_proba(input_features)[0][1]
    
    print("\n----- Resume Evaluation Result -----")
    print(f"Age: {age} | Years of Experience: {years_experience}")
    print(f"Education Level: {education_text}")
    print(f"Previous Job: {previous_job_text} | Current Job: {current_job_text}")
    print(f"Ethics Score: {ethics_score:.2f} | Intellectual Score: {intellectual_score:.2f} | Emotional Score: {emotional_score:.2f}")
    print(f"Attitude Response: {attitude_response.capitalize()} (score = {attitude_score})")
    
    if inconsistency_flag:
        print("⚠️ Triangulation detected possible regression in job level (inconsistency).")
    
    print(f"✅ Decision: {'APPROVED' if pred_label == 1 else 'NOT APPROVED'} (Confidence: {pred_prob:.2%})")
    print("-----------------------------------\n")
    
    return pred_label, pred_prob

# ---------------------------------------
# 5. Example Usage
# ---------------------------------------

evaluate_resume(
    age=36,
    years_experience=14,
    education_text='Postgrad',
    previous_job_text='Manager',
    current_job_text='Analyst',
    ethics_score=0.85,
    intellectual_score=0.80,
    emotional_score=0.65,
    attitude_response='positive'
)

